
MAS245.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078b  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  00000ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setupPWM>:


// PWM output configuration on OC0A (pin PD6/12)
void setupPWM()
{
	DDRD |= (1 << DDD6);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= (1 << COM0A1); // Clear OC0A on Compare Match, set OC0B at BOTTOM, (non-inverting mode)
  86:	84 b5       	in	r24, 0x24	; 36
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01);
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM00);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	81 60       	ori	r24, 0x01	; 1
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00); // No prescaling.
  98:	85 b5       	in	r24, 0x25	; 37
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 bd       	out	0x25, r24	; 37
  9e:	08 95       	ret

000000a0 <main>:
}


int main()
{
	setupPWM();
  a0:	0e 94 40 00 	call	0x80	; 0x80 <setupPWM>
	while(1)
	{
		for(int i = 255 ; i > 0 ; i--)
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 c0       	rjmp	.+16     	; 0xba <main+0x1a>
		{
			OCR0A = i;
  aa:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	e9 ef       	ldi	r30, 0xF9	; 249
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x10>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x16>
  b6:	00 00       	nop
int main()
{
	setupPWM();
	while(1)
	{
		for(int i = 255 ; i > 0 ; i--)
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	18 16       	cp	r1, r24
  bc:	19 06       	cpc	r1, r25
  be:	ac f3       	brlt	.-22     	; 0xaa <main+0xa>
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 c0       	rjmp	.+16     	; 0xd6 <main+0x36>
			_delay_us(50);
		}
			
		for(int i = 0 ; i < 255 ; i++)
		{
			OCR0A = i;
  c6:	87 bd       	out	0x27, r24	; 39
  c8:	e9 ef       	ldi	r30, 0xF9	; 249
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x2c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x32>
  d2:	00 00       	nop
		{
			OCR0A = i;
			_delay_us(50);
		}
			
		for(int i = 0 ; i < 255 ; i++)
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	8f 3f       	cpi	r24, 0xFF	; 255
  d8:	91 05       	cpc	r25, r1
  da:	ac f3       	brlt	.-22     	; 0xc6 <main+0x26>
  dc:	e3 cf       	rjmp	.-58     	; 0xa4 <main+0x4>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
